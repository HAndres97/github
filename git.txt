Enlace sobre teoria de git:
    https://git-scm.com/book/en/v2

--------------------------------------------------------------------------------
Instalador de paquetes de Windows: winget (WinGet es una herramienta de línea de comandos,
que permite a los usuarios detectar, instalar, actualizar, quitar y configurar aplicaciones en equipos con Windows 10 y Windows 11)
Comandos:
    1.  winget --version
    2.  winget upgrade (Para ver que actualizaciones hay disponibles)
    3.  winget upgrade --id Git.Git (Actualiza Git)
    Enlace de explicacion y ejemplios:
        https://www.crashell.com/estudio/4_maneras_de_instalar_git_por_linea_de_comandos

----------------------------------------------------------------------------------
Comandos básicos
    1.  ls  "Ver los directorios, que nuestra carpeta"
    2.  cd "Acceder a una directorio"
    3.  pwd "En que ruta estamos"
    4.  mkdir "Nueva Carpeta"
    5.  touch  hello-git.txt "Crea un txt"
    6.  rm hello-git.txt "Elimina el txt"
    7.  cp  hello-git.txt /Practica "Copia el archivo al ese directorio"
    8.  mv hello-git.txt /Practica "Mueve el archivo al ese directorio"

----------------------------------------------------------------------------------
Configuracion primera vez
    1. git config --gloabl user.name "Christian Herrera"
    2. git config --global user.email "hchristianandres@gmail.com"
    Verificar con
    3. git --list o git user.name
----------------------------------------------------------------------------------
Iniciamos Git
    1.  Creamos un archivo "touch hellogit.py"
    2.  git init -- Iniciamos un repositorio de git en la raiz de la carpeta donde iniciemos.
----------------------------------------------------------------------------------
Primeros comandos:
Commit: Es como tomar una fotografía del estado actual de nuestro proyecto en un memento determinado,
        estos commits se almacenan en un historial de cambios del repositorio, identificados por un hash o identificador unico
Add: Este comando nos permite añadir archivo al area del Stage, zona intermedia donde se preparan los archivos antes de hacer un Commit
    1.  git branch -m main "Comando para cambiar nombre de master"
    2.  git status "Ver el estado del repositorio"
    3.  git add hellogit.py "Añadimos un archivo"
    4.  git add . "Añade todo al repositorio"
    5.  git commit -m "Primeros archivos de nuestro estudio" -- Para realizar un commit
    6.  git log "Nos indica los commits"
    7.  git checkout hellogit2.py "Quita las modificaciones"
    8.  git reset hellogit.py "Quita las modificaciones"
    9.  git log --graph "Nos muestra los datos de log de distinta forma"
        - git log --pretty=oneline
        - git log --decorate
        - git log --graph --pretty=oneline --decorate
    10. git config --global alias.tree "log --graph --decorate --all --oneline" Configuramos una alias "tree significado todo eso"
    11. git tree, llamamos al alias antes creado
    12. touch .gitignore, archivo para añadir rutas/archivos que no se debe tener en cuenta, archivos temporales
    13. git diff, antes de realizar un commit podemos verificar que cambios hay respecto al commit anterior.
    14. git diff ba3ea58 923308d, diferencia que hay entre dos commits
    15. git diff --name-only ba3ea58 923308d, aparece solo los nombres de los archivos modificados

