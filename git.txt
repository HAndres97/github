Enlace sobre teoria de git:
    https://git-scm.com/book/en/v2

--------------------------------------------------------------------------------
Instalador de paquetes de Windows: winget (WinGet es una herramienta de línea de comandos,
que permite a los usuarios detectar, instalar, actualizar, quitar y configurar aplicaciones en equipos con Windows 10 y Windows 11)
Comandos:
    1.  winget --version
    2.  winget upgrade (Para ver que actualizaciones hay disponibles)
    3.  winget upgrade --id Git.Git (Actualiza Git)
    Enlace de explicacion y ejemplios:
        https://www.crashell.com/estudio/4_maneras_de_instalar_git_por_linea_de_comandos

----------------------------------------------------------------------------------
Comandos básicos
    1.  ls  "Ver los directorios, que nuestra carpeta"
    2.  cd "Acceder a una directorio"
    3.  pwd "En que ruta estamos"
    4.  mkdir "Nueva Carpeta"
    5.  touch  hello-git.txt "Crea un txt"
    6.  rm hello-git.txt "Elimina el txt"
    7.  cp  hello-git.txt /Practica "Copia el archivo al ese directorio"
    8.  mv hello-git.txt /Practica "Mueve el archivo al ese directorio"

----------------------------------------------------------------------------------
Configuracion primera vez
    1. git config --gloabl user.name "Christian Herrera"
    2. git config --global user.email "hchristianandres@gmail.com"
    Verificar con
    3. git --list o git user.name
----------------------------------------------------------------------------------
Iniciamos Git
    1.  Creamos un archivo "touch hellogit.py"
    2.  git init -- Iniciamos un repositorio de git en la raiz de la carpeta donde iniciemos.
----------------------------------------------------------------------------------
Primeros comandos:
Commit: Es como tomar una fotografía del estado actual de nuestro proyecto en un memento determinado,
        estos commits se almacenan en un historial de cambios del repositorio, identificados por un hash o identificador unico
Add: Este comando nos permite añadir archivo al area del Stage, zona intermedia donde se preparan los archivos antes de hacer un Commit
    1.  git branch -m main "Comando para cambiar nombre de master"
    2.  git status "Ver el estado del repositorio"
    3.  git add hellogit.py "Añadimos un archivo"
    4.  git add . "Añade todo al repositorio"
    5.  git commit -m "Primeros archivos de nuestro estudio" -- Para realizar un commit
    6.  git log "Nos indica los commits, para salir de git log pulsamos tecla q "
    7.  git checkout hellogit2.py "Quita las modificaciones"
    8.  git reset hellogit.py "Quita las modificaciones"
    9.  git log --graph "Nos muestra los datos de log de distinta forma"
        - git log --pretty=oneline
        - git log --decorate
        - git log --graph --pretty=oneline --decorate
    10. git config --global alias.tree "log --graph --decorate --all --oneline" Configuramos una alias "tree significado todo eso"
    11. git tree, llamamos al alias antes creado
    12. touch .gitignore, archivo para añadir rutas/archivos que no se debe tener en cuenta, archivos temporales
    13. git diff, antes de realizar un commit podemos verificar que cambios hay respecto al commit anterior.
    14. git diff ba3ea58 923308d, diferencia que hay entre dos commits
    15. git diff --name-only ba3ea58 923308d, aparece solo los nombres de los archivos modificados
    16. git checkout 1aef212, cambia de rama a un commit anterior, borrando y perdiendo archivos "Si hemos hecho commit estos se quedan en esa fotografia"
    17. git checkout head, cambia el puntero de cabecera a donde hayamos hecho el anterior checkout.
    18. git reset --hard "Commit anterior", "borra" los commits hasta el commit comentado, entre comillas porque todavia podemos recuperar lo borrando
    19. git reflog, historial de lo que hemos hecho, ahi vemos el commit que desaparecio y podemos volver a el
    20. git reset --hard "Commit adelante", sirve tanto para adelante como atras, si borramos y queremos volver al principal podemos.
Tag: Es un punto de especifico en el historial de cambios de nuestro repositorio, usados para marcar versiones de una aplicacion o punto importante
    21. git tag version-1, Es como poner nombre a un tag.
    22. git tag, nos lista todos los tags
    23. git checkout tags/version-1, se mueve a la version 1.
--------------------------------------------------------------------------------------------------------------
    24. git branch login, "Creamos una nueva rama"
    25. git switch login , "Cambio a la rama de login, es mas adecuado usuarlo en local "
    "Lo podemos hacer con checkout pero este se hace mas en remoto, cuando queremos bajar los cambios e irnos a esa rama"
    26. git merge main , "Combina los cambios que se han producido en otras ramas aqui main, primero nos colocamos donde queremos
        fusionar y ponemos la rama que queremos fucionar con nuestra rama"
"Si hay conflicto al modificar la misma linea de codigo en dos ramas distintas, al hacer merge nos indica que cual de
     de los cambios nos queremos quedar, para salir del proceso marge tenemos que añadir el cambio y comitear"
    27. git diff main, "Vemos los cambios que hay entre la rama actual y main"
    28. git stash,"Cuando trabajamos y queremos cambiar de rama sin comitear los cambios, podemos hacerlo con stash, lo guarda en local de la rama, y puedes cambiar de rama"
    29. git stash pop, si queremos recuperar lo guardado en stash y lo borra de la lista
    30. git stash drop, si no queremos recuperar y borrar lo guardado.
    31. git branch -d login, "Una vez hecho el trabajo e integrado se suele borrar la rama"


