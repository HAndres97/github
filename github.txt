git: Es un sistema  de control de versiones, una herraminesta que nos permitira trabajar con nuestro codigo de manera segura.
github:  Es una plataforma de alojamiento de codigo que utiliza el sistema de control de versiones git.
    1.  Repositorios para almacenar nuestro codigo puede ser publico o privado.
    2.  Integracion continuas, nos permite integrar la contruccion y las prubas de nuestro codigo directamente en la plataforma
    3.  Seguimiento de errores.
    4.  Colaboracion en proyectos de cofigo abierto.
Tenemos un archivo PDF con los comandos mas importantes de git.

Al crear nuestro primer repositorio, podemos poner como nombre el mismo que el del propietario y asi montar en ese repositorio 
nuestra pagina de presentación.

Realizar un buen perfin en nuestro readme.md, usamos lenguaje markdown md, su sintaxis basicas y recursos podemos
encontrarla en : https://www.markdownguide.org/cheat-sheet/

Podemos coger de referencia la pagina de moureDev: https://github.com/mouredev/mouredev/blob/master/README.md?plain=1

------------------------------------------------------------------------------------------------------------------------------
Autentificación con github, conectar de local a remoto con github a traves de SSH
Enlace de referencia: https://docs.github.com/es/authentication
Seguir el video en la parte de SSH, en mi ordenador ya tenia la carpeta .ssh y las claves.
Crear nuevas llaves
https://docs.github.com/es/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=windows
Con Github Desktop, no hace falta todos estos pasos.
https://www.youtube.com/watch?v=tY6IKEYz5vU
Lo hace mas sencillo
-------------------------------------------------------------------------------------------------------------------------
Conectar mi directorio de tabajo con git usando el siguiente comando:
-- git remote add origin git@github.com:HAndres97/github.git

-------------------------------------------------------------------------------------------------
Caso de uso:
    Cuando cree el repositorio, actualize el readme.md y se creo un commit
    cuando sincronize con el repositorio local/remoto e hice un push me decia 
    que necesitab un pull antes, pero este pull no se podia hacer ya que las historias
    eran distintas , por lo que hay que forzar a unirlas a traves de 
    git pull origin main --allow-unrelated-histories "En mi caso main"

--------------------------------------------------------------------------------------------------

Una vez conectado podemos usar los siguientes comandos:
    1. git push -u origin main, subimos todo nuestro proyecto a la rama principal
    2. git pull origin main, descargar los cambios que ha habido en el repositorio
    3. git fetch actualizar los cambios, pero sin bajarlos, solo el hisorial que se ve en git tree

--------------------------------------------------------------------------------------------------
Si queremos realizar un cambio en un repositorio publico en el que no tenemos permiso de acceder,
tenemos que realizar un fork, es una copoia identica de su repositorio pero copiado al nuestro

--------------------------------------------------------------------------------------------------
Podemos usar stackedit para realizar un markdown online,
https://stackedit.io/app#

---------------------------------------------------------------------------------------------------
PULL REQUEST
Sirve para solicitar algun cambio en un proyecto una vez hecho fork, el dueño del repositorio mira 
las pull request solicitadas y la puede añadir a su  repositorio.

---------------------------------------------------------------------------------------------------
Los conflictos de Pull Request se resuelve en Github.

---------------------------------------------------------------------------------------------------
Marcdown documentacion:
    https://docs.github.com/es/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax

--------------------------------------------------------------------------------------------
Vemos las herramientas graficas en este caso de github Desktop y tambien vemos gitkraken 
a Mourodev le gusta mas este ultimo
-------------------------------------------------------------------------------------------------
GitFlow: Es un flujo de coloboración.
    Recomendacion, aunque tenga un proyecto propio seguir un flujo de colaboracion, se hace mas sencillo el trabajo y
    aprendemos a entender mejor los flujos.
    Documentación para aprender como funciona mejor Git-flow:
    1.  https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy
    2.  https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

    Se basa en dos ramas principales:
        1.  La rama main: Es la rama que versiona, solo  para lo que llega produccion y tagear(Versionar)
        2.  La rama develop: Todo lo que esta en esta rama llegado al caso puede llegar a produccion,
            cuando esto sucede se crea una version en main. Esta rama principal esta formada por 3 ramas distintas
            2.1 Feature: Se utiliza para desarrollar nuevas caracteristicas o funcionalidades, una vez termina se une a la rama develop
            2.2 Realese: Se usa para preparar una nueva version de la aplicación para el despliegue. Se fusiona en las dos ramas principales
        3.  Hotfix: Se utiliza para solucionar errores criticos en la version de main, se basa en la rama main, 
            cuando se soluciona el problema pasa un version sin bug a main y develop.
    Para poder usar este flujo existe un pluggin:
        1.  git-flow, "Vemos los comandos posibles"
        2.  git flow init, inicializamos con todos las ramas y ponemos los nombres de las ramas.
        3.  git flow feature star <nombre de la rama>, trabajamos en ella.
        4.



